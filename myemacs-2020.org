#+TITLE: My Emacs 2020 configuration
#+AUTHOR: Alberto Ferreira
#+OPTIONS: num:nil

Had to redo my 10yr old setup. Starting anew with .org-based configuration.

Based .org setup on https://github.com/himmAllRight/dotfiles/blob/master/emacs/config.org

Compiled emacs from source with:
#+begin_src bash
./configure --with-cairo --with-xwidgets
#+end_src

* Bootstrap myemacs system:

Myemacs-dir must be set by user before loading myemacs system:
   #+begin_src emacs-lisp
  (unless (boundp 'myemacs-dir)
    (throw 'myemacs-dir "myemacs-dir is not set!"))

  (defvar myemacs-dir
    (if (string-suffix-p "/" myemacs-dir)
        (concat myemacs-dir "/")
      myemacs-dir)
    "The myemacs directory on your filesystem.
  Used by myemacs system to load its internal extension modules")
#+end_src

Also, define some useful variables:
#+begin_src emacs-lisp
  (defconst windows-os (eq system-type 'windows-nt)
    "t if this is a Windows OS")
#+end_src

* Bootstrap packages

** Melpa
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

** use-package (& key-chords)
Install `use-package` if necessary:
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

Load use-package at compile-time:
#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
#+end_src

Key chord extensions:
#+begin_src emacs-lisp
(use-package key-chord :ensure t)
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
#+end_src

Hydra extensions:
#+begin_src emacs-lisp
(use-package hydra :ensure t)
(use-package use-package-hydra
  :ensure t)
#+end_src

** Auto-compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t)
(setq load-prefer-newer t)
#+END_SRC

* Core Setup
** Basic Stuff
*** Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)


(setq dired-dwim-target t)

#+END_SRC

*** Dired-mode
#+begin_src emacs-lisp
  (defun my/setup_dired_shortcuts ()
    (local-set-key (kbd "M-<up>") 'dired-up-directory))

  (add-hook 'dired-mode-hook 'my/setup_dired_shortcuts)

  ;; probably should bind all those inside dired keymap only:
  (use-package dired-rsync
    :ensure t
    :config (bind-key "C-c C-r" 'dired-rsync dired-mode-map))

  (use-package "my-rsync.el"
    :load-path myemacs-dir
    :after dired-rsync
    :chords ("çr" . my-rsync-from-dired-mark))


  (setq dired-listing-switches "-alh") ;; human-readable filesizes in dired

#+end_src

*** TRAMP
#+begin_src emacs-lisp
(setq tramp-use-ssh-controlmaster-options nil) ; Lets TRAMP use my custom ssh:ControlPath
#+end_src

*** Splash Screen
Remove splash screen and use *scratch* instead as the home buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

*** Line Numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode 0)
#+END_SRC

*** Menu Bar
Switch the Menubar off by default (I like to keep everything clean)
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** New Line indent
New lines auto indents
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET")
  'newline-and-indent)
#+END_SRC

*** Tool Tips
Tool Tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Status bar
#+begin_src emacs-lisp
(column-number-mode 1) ; add column number besides the line number
#+end_src

*** Recentf mode
Enable recent files mode
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src

*** Fringes
#+begin_src emacs-lisp
;(set-fringe-mode 1) ;; Disable fringes
#+end_src

*** Cursor
#+begin_src emacs-lisp
(blink-cursor-mode 1)
#+end_src

*** Electric-pair-mode

    Automatically insert matching parenthesis/quotes if a region is selected:
    #+begin_src emacs-lisp
     ;; (electric-pair-mode)
    #+end_src


** Themes

#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    ;(load-theme 'spacemacs-light t) ;; called already in '#myemacs-load-theme
    (setq spacemacs-theme-org-agenda-height nil)
    (setq spacemacs-theme-org-height nil))

  ;; Still need to understand how to make the spaceline activate correctly below:

  (use-package spaceline
    :disabled
    :ensure t
    ;;:after spacemacs-theme
    ;;:defer t
    :init
    (setq powerline-default-separator 'arrow-fade)
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme))

  (use-package all-the-icons :ensure t)
  (use-package spaceline-all-the-icons
    :disabled
    :ensure t
    :after spaceline
    :config (spaceline-all-the-icons-theme))

  (defvar myemacs-theme 'spacemacs-light
    "Theme set in myemacs package")
  (defun myemacs-load-theme ()
    (load-theme myemacs-theme t))
#+END_SRC

** Dashboard
Use the "dashboard" package for my startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)

    ;; Edits
    (setq dashboard-banner-logo-title "Welcome to Emacs Alberto!")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents   . 5)
                            (bookmarks . 5)
                            (agenda    . 5))))
#+END_SRC

** Window Management
*** Winner mode
#+begin_src emacs-lisp
(use-package winner
  :init (winner-mode 1)
  )
#+end_src

*** Switch-Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t)
#+END_SRC

*** Key Binding
#+BEGIN_SRC emacs-lisp
;; Previous Window shortcut
(global-set-key (kbd "C-x p")
                (lambda() (interactive) (other-window -1)))
(global-set-key (kbd "C-x o")
                (lambda() (interactive) (other-window 1)))
(global-set-key (kbd "C-c z") 'zoom-window)
#+END_SRC

** Navigation/Movement / editing key bindings
#+begin_src emacs-lisp
  ;; actions
  (key-chord-define-global "çf"  'ido-find-file)
  (key-chord-define-global "çb"  'ido-switch-buffer)
  (key-chord-define-global "çs"  'save-buffer)
  (key-chord-define-global "ÇS"  'save-buffer)
  (key-chord-define-global "ço"  'other-window)
  (key-chord-define-global "çk"  'kill-this-buffer)
  (key-chord-define-global "ÇK"  'clean-buffers)
  (key-chord-define-global "çu"  'undo)
  (key-chord-define-global "ç1"  'delete-other-windows)
  (key-chord-define-global "ç2"  'split-window-below)
  (key-chord-define-global "ç3"  'split-window-right)
  (key-chord-define-global "ç0"  'delete-window)
  (key-chord-define-global "çw"  'kill-word)
  (key-chord-define-global "ç "  'whitespace-cleanup)
  (key-chord-define-global "çj"  'join-line)
  (key-chord-define-global "ÇJ"  'join-line)
  (key-chord-define-global "çc"  'comment-or-uncomment-region)

  (use-package expand-region
      :ensure t
      :chords ("ça" . er/expand-region))


  (key-chord-define-global "çt" 'org-sparse-tree) ;org


  ;;(use-package hide-comnt :ensure t)
  ;;(define-key global-map (kbd "C-c #") 'hide/show-comments-toggle)

  ;; (deprecated chords)
  ;;(key-chord-define-global "çb"  'helm-mini)
  ;;(key-chord-define-global "çf"  'helm-find-files)
  ;;(key-chord-define-global "fg" 'iy-go-to-char)
  ;;(key-chord-define-global "df" 'iy-go-to-char-backward)
  ;;(use-package iy-go-to-char :ensure t)


  (key-chord-define-global "çh"  'replace-string)

  ;; navigation
  ;;(key-chord-define-global "ºj"  'ace-jump-mode)



  ;; non-key-chord actions:
  (global-set-key (kbd "s-r") 'recentf-open-files)
  (global-set-key (kbd "s-o") 'myfiles)
#+end_src

** Drag-stuff
Use package drag stuff:
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-global-mode t))
#+end_src

Add code to drag manually:
#+begin_src emacs-lisp
  (load (concat myemacs-dir "move_lines"))
#+end_src
** Org-mode

#+begin_src emacs-lisp
  ;; Org-mode settings
  (use-package org
    :defer t
    :init
    (setq org-agenda-files '("~/org" "~/org/max"))

    :hook (org-mode . (lambda () (visual-line-mode)))

    :config
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-font-lock-mode 1)

    (unless windows-os
      (require 'ox-gfm nil t)
      (load-file (concat myemacs-dir "org-gitbook.el"))))

  (use-package ox-reveal
    :disabled
    :after org
    :init
    (add-to-list 'load-path "~/code/external/org-reveal/ox-reveal.el")
    (load-file "~/code/external/org-reveal/ox-reveal.el")
    (require 'ox-reveal)
    (setq org-reveal-root "file:///home/alberto.ferreira/code/external/reveal.js/"))

  ;; export html
  (defun org-f5 ()
    (interactive)
    (save-buffer)
    (org-html-export-to-html))
  (define-key org-mode-map (kbd "<f5>") 'org-f5)


  ;; clock time
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)


  ;; org-mode inline languages and disable confirmation
  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) (shell . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-tab-acts-natively t) ; better editing behaviour for python indentation

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cc" 'org-capture)

  ;; Could use daily journal files instead: (http://www.howardism.org/Technical/Emacs/journaling-org.html)
  ;; See also https://orgmode.org/manual/Template-expansion.html
  (setq org-capture-templates
        '(("t" "Todo" entry (file+datetree "~/org/gtd.org") ;(file+headline "~/org/gtd.org" "Tasks")
           "* TODO %?\n  :PROPERTIES:\n  :creation_date: %U\n  :created_in: %a\n  :END:\n\n %i\n")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))

  ;; Org refile!! Important to read & setup! https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  ;; See also http://www.howardism.org/Technical/Emacs/getting-more-boxes-done.html !
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3))
        org-refile-use-outline-path 'file
        org-refile-allow-creating-parent-nodes 'confirm
        org-outline-path-complete-in-steps nil)


  (defun select-org-table-cell ()
    "Selects a cell content in an org table if the cursor is placed inside"
    (interactive)
    (search-backward "|")
    (forward-char)
    (skip-chars-forward " ")
    (set-mark (point))
    (search-forward "|")
    (backward-char)
    (skip-chars-backward " "))
  (key-chord-define-global "ºc"  'select-org-table-cell)

#+end_src
*** Syntax highlighting for Org-mode exports

    Org-mode exports will require extra packages for syntax highlighting in different back-ends.

    HTML backend:
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

*** Org-roam

There's also the non-hierarchic note-taking system **org-roam** of course:
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org-roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)

    (setq org-roam-capture-templates
          '(("d" "default" plain "#+date: %U\n\n%?" :if-new
             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
             :unnarrowed t))))
#+end_src

#+RESULTS:
: org-roam-dailies-capture-today

** Clipboard
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

** Bell
#+begin_src emacs-lisp
;(setq ring-bell-function 'ignore)
#+end_src

** Iedit

#+begin_src emacs-lisp
(use-package iedit
  :ensure t)
#+end_src

** Myfiles (bookmarking system)
#+begin_src emacs-lisp
  (load (concat myemacs-dir "myfiles"))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")

  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src

** Bookmarks
#+begin_src emacs-lisp
(use-package bm
  :bind (("<C-f2>" . bm-toggle)
         ("<f2>" . bm-next)
         ("<S-f2>" . bm-previous)))
#+end_src

#+RESULTS:
: bm-previous

* Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t)

;;(use-package helm-config :ensure t)


;;(helm-mode 1)

;;(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;;(global-set-key (kbd "C-x b") 'helm-buffers-list)
;(global-set-key (kbd "C-x b") 'helm-mini)
;;(global-set-key (kbd "C-x C-f") 'helm-find-files)

#+end_src

* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :chords ("ºj" . avy-goto-word-or-subword-1))
#+end_src

* Ivy
Setup and use Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Ivy Keybindings
  (global-set-key (kbd "C-c C-r") 'ivy-resume))
#+END_SRC

Configure Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :disabled
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper)
    )
#+END_SRC

Counsel configuration
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :disabled
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+END_SRC

* Key Bindings
These will eventually be relocations to just be included with their
respective ~use-package~ calls...

#+BEGIN_SRC emacs-lisp
  ;; Eshell launch keybind
  (global-set-key (kbd "C-c t") 'eshell)

  ;; Comment/Uncomment region
  (global-set-key (kbd "C-c ;") 'comment-region)

  ;; Comment/Uncomment region
  (global-set-key (kbd "C-c s") 'org-edit-src-code)
#+END_SRC

* Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :unless windows-os ;; disable on Windows for now until fix is available.
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))) ; don't show line numbers beside pdf
#+end_src

* Writing
** Pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :unless windows-os)
#+END_SRC

** Screenshots
Paste images directly from clipboard to org documents:
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :ensure t
    :chords (("çy" . org-download-clipboard)))
#+END_SRC


** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** DVI
#+begin_src emacs-lisp
(setq tex-dvi-view-command "xdvi")
#+end_src

* Development

** rg
#+begin_src emacs-lisp
  (use-package rg
    :disabled ;; currently broken: no 'rg-menu function.
    :ensure t
    :config
    (rg-enable-default-bindings))
#+end_src

#+begin_src emacs-lisp
    (use-package deadgrep
      :ensure t
      :bind ("<f6>" . 'deadgrep))
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-l" . 'mc/edit-lines)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C-<" . 'mc/mark-all-like-this)
           ("C-S-<mouse-1>" . 'mc/add-cursor-on-click))
    :hydra ( multiple-cursors-hydra (:hint nil)
                                    "
       ^Up^            ^Down^        ^Other^
  ----------------------------------------------
  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^             ^ ^             [_q_] Quit
  "
                                    ("l" mc/edit-lines :exit t)
                                    ("a" mc/mark-all-like-this :exit t)
                                    ("n" mc/mark-next-like-this)
                                    ("N" mc/skip-to-next-like-this)
                                    ("M-n" mc/unmark-next-like-this)
                                    ("p" mc/mark-previous-like-this)
                                    ("P" mc/skip-to-previous-like-this)
                                    ("M-p" mc/unmark-previous-like-this)
                                    ("r" mc/mark-all-in-region-regexp :exit t)
                                    ("q" nil)))
#+end_src

** Auto Complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))
#+END_SRC

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :disabled
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-global-mode 1)
  ;; Yasnippet with Shift+Tab
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  ;; Set Yasnippet's key binding to shift+tab
  (define-key yas-minor-mode-map (kbd "<backtab>") 'yas-expand))
#+end_src

** Git
I use magit for easy git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :chords (("çm" . magit-status))
    :bind (("C-c g" . 'magit-status)))
#+END_SRC

However, git for windows is *extremely* slow. So, use this simpler
git status mode to make it a little faster:
#+begin_src emacs-lisp
  (when windows-os
    (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
      "Mode for showing staged and unstaged changes."
      :group 'magit-status)
    (defun magit-staging-refresh-buffer ()
      (magit-insert-section (status)
                            (magit-insert-untracked-files)
                            (magit-insert-unstaged-changes)
                            (magit-insert-staged-changes)))
    (defun magit-staging ()
      (interactive)
      (magit-mode-setup #'magit-staging-mode)))

#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :commands projectile-grep
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode +1))
#+end_src

** Yaml
Setup YAML mode for editing configs
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

** Json
Json mode:
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC

** Python
Starting a python dev setup:

Set default interpreter to python 3 instead of 2.
#+BEGIN_SRC emacs-lisp
  (setf python-shell-interpreter "python3")
#+END_SRC

** Lisp

*** Lispy
#+begin_src emacs-lisp
  (use-package lispy
    :ensure t)
#+end_src

** Common Lisp
*** Slime
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :pin melpa
    :defer t
    :commands slime
    :config
    (load (expand-file-name "~/.roswell/helper.el"))
    (setq inferior-lisp-program "ros -Q run")

    ;;(add-to-list 'load-path "path/of/slime")
    (require 'slime-autoloads)

    ;(load "~/.roswell/lisp/quicklisp/log4slime-setup.el")
    ;(global-log4slime-mode 1)

    (global-set-key "\C-cs" 'slime-selector)

    (key-chord-define-global "çq" 'slime-eval-last-expression)
    ())
#+end_src

*** Paredit
#+begin_src emacs-lisp
(use-package paredit
   :ensure t  ;; if you need it
   :commands (enable-paredit-mode))
   ;;:init
   ;;(add-hook 'clojure-mode-hook #'enable-paredit-mode))
#+end_src

*** Parinfer
#+begin_src emacs-lisp
  (use-package parinfer
    :ensure nil
    :disabled  ;; it's broken - deprecated & to be replaced by parinfer-rust & parinfer-rust-mode
    :defer 1
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
               pretty-parens  ; different paren styles for different modes.
               evil           ; If you use Evil.
               lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
               paredit        ; Introduce some paredit commands.
               smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
               smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src

*** TODO Improve sweet-expressions compatibility
#+begin_src emacs-lisp
;;(load (concat myemacs-dir "sweet-lisp.el"))
#+end_src

Auto-pair parenthesis:
#+begin_src emacs-lisp
  (use-package autopair
    :ensure nil
    :disabled ;; apparently it's no longer on MELPA?! Look for replacement
    :config (autopair-global-mode 1))
#+end_src

*** Local HyperSpec
#+begin_src emacs-lisp
  (use-package clhs-use-local.el
    :unless windows-os
    :disabled ;; Add back theses files in the future.
    :load-path "~/.roswell/lisp/quicklisp")
#+end_src

*** Syntax highlighting for defstar
#+begin_src emacs-lisp
  ;; fontify doc strings in correct face
  ;; lisp-mode already fontifies 'defun*' correctly
  (put 'defvar*   'doc-string-elt 3)
  (put 'defparameter*   'doc-string-elt 3)
  (put 'lambda*   'doc-string-elt 2)

  (defvar *lisp-special-forms*
    (regexp-opt '("defvar*"
                "defconstant*"
                "defparameter*"
                "defgeneric*"
                "defmethod*"
                "lambda*"
                "flet*"
                "labels*") 'words))
  (font-lock-add-keywords 'lisp-mode
    `((,*lisp-special-forms* . font-lock-keyword-face)))
#+end_src
** Fill column indicator
#+begin_src emacs-lisp

(use-package fill-column-indicator
  :ensure t
  :config
  (setq fci-rule-column 100))

#+end_src

** String manipulation
#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src

** Rust

   This setup follows from [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/][Rust with Emacs]].

   Rustic is a lightweight system with no dependencies that replaces rust-mode:
#+begin_src emacs-lisp
(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))
#+end_src

however, it is not as full featured as using LSP + rust-analyzer:

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    ;(lsp-ui-doc-enable nil)  ;; Docs might be too verbose. If so uncomment this.
    )
#+end_src


** Company-mode (completion)

   #+begin_src emacs-lisp
(use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
              ("C-n". company-select-next)
              ("C-p". company-select-previous)
              ("M-<". company-select-first)
              ("M->". company-select-last)))
   #+end_src

* Custom functions

** himmAllRight's dotfile Random Functions
Taken from the original .org-based setup at https://github.com/himmAllRight/dotfiles/blob/master/emacs/config.org
*** Zoom-Window
  Saves the current state of the buffers, and then zooms the current
  buffer full screen. When called again, goes back to origonal buffer
  setup.
  #+BEGIN_SRC emacs-lisp
  (setq zoom-temp-window-configuration nil)
  (defun zoom-window ()
    (interactive)
    (if zoom-temp-window-configuration
        (progn
          (set-window-configuration zoom-temp-window-configuration)
          (setq zoom-temp-window-configuration nil)
          (message "Window un-zoomed"))
      (progn
        (setq zoom-temp-window-configuration (current-window-configuration))
        (delete-other-windows)
        (message "Window zoomed"))))
  #+END_SRC

*** eshell-clear-buffer
 Clears my eshell more like a normal terminal would
 #+BEGIN_SRC emacs-lisp
 (defun eshell-clear-buffer ()
   "Clear terminal"
   (interactive)
   (let ((inhibit-read-only t))
     (erase-buffer)
     (eshell-send-input)))
 #+END_SRC

 I need this hook for the function, and I like to set it to a keybind:
 #+BEGIN_SRC emacs-lisp
 (add-hook 'eshell-mode-hook
           '(lambda()
              (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

 (global-set-key (kbd "C-c <delete>") 'eshell-clear-buffer)
 #+END_SRC

** My custom functions
*** duplicate-line
  #+begin_src emacs-lisp
  (use-package duplicate_line.el
    :load-path myemacs-dir
    :config
    (key-chord-define-global "çd" 'duplicate-line))
  #+end_src

*** kill-whole-line
 #+begin_src emacs-lisp
 (defun Kill-whole-line ()
   (interactive)
   (let ((oldpoint (point)))
     (kill-whole-line)
     (goto-char oldpoint)))

 (define-key global-map (kbd "C-S-k") 'kill-whole-line)
 #+end_src

*** smart line beginning
 #+begin_src emacs-lisp
 (defun smart-line-beginning ()
   "Move point to the beginning of text on the current line; if that is already
 the current position of point, then move it to the beginning of the line."
   (interactive)
   (let ((pt (point)))
     (beginning-of-line-text)
     (when (eq pt (point))
       (beginning-of-line))))


 (define-key global-map (kbd "C-a") 'smart-line-beginning)
 #+end_src

*** Rename current buffer file
#+begin_src emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting. Found on stackoverflow :)."
  (interactive)
  (let* ((name (buffer-name))
         (filename (buffer-file-name))
         (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src

*** TODO Random utils (needs organization)
#+begin_src emacs-lisp

  ;; (defun my-find-file-check-make-large-file-read-only-hook ()
  ;;   "If a file is over a given size, make the buffer read only."
  ;;   (when (> (buffer-size) (* 1024 1024))
  ;;     (setq buffer-read-only t)
  ;;     (buffer-disable-undo)
  ;;     (fundamental-mode)))

  ;(add-hook 'find-file-hook 'my-find-file-check-make-large-file-read-only-hook)



  (defun clean-buffers ()
    (interactive)
    (let ((clean-buffer-list-delay-general 0))
      (clean-buffer-list)))


  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer
          (delq (current-buffer)
                (remove-if-not 'buffer-file-name (buffer-list)))))
#+end_src

*** TODO Organize line functions
#+begin_src emacs-lisp
(defun create-indent-and-go-to-next-line ()
  (interactive)
  (move-end-of-line 1)
  (insert "\n")
  (indent-for-tab-command))

(defun add-empty-line-above ()
  (interactive)
  (save-excursion
    (forward-line -1)
    (create-indent-and-go-to-next-line)))


(define-key global-map (kbd "S-<return>") 'create-indent-and-go-to-next-line)
(define-key global-map (kbd "C-<return>") 'add-empty-line-above)
#+end_src

That's it! Enjoy!

*** Recompile packages
#+begin_src emacs-lisp
(defun my-package-recompile()
  "Recompile all packages"
  (interactive)
  (byte-recompile-directory "~/.emacs.d/elpa" 0 t))
#+end_src

*** Jump around punctuation
#+begin_src emacs-lisp
(defun create-and-go-to-next-line ()
  (interactive)
  (move-end-of-line nil)
  (autopair-newline))

(defun goto-next-dot ()
  (interactive)
  (search-forward "."))
(defun goto-prev-dot ()
  (interactive)
  (search-backward "."))
(defun goto-next-comma ()
  (interactive)
  (search-forward ","))
(defun goto-prev-comma ()
  (interactive)
  (search-backward ","))
(defun goto-next-dollar ()
  (interactive)
  (search-forward "$"))
(defun goto-prev-dollar ()
  (interactive)
  (search-backward "$"))
#+end_src


** TODO Extras (alpha-stage)

   Auto-pair. Autopair and the newer Electric-pair mode are still not sufficient for some purposes.

   #+begin_src emacs-lisp
     (use-package smart-pair
       :load-path myemacs-dir
       :chords (("çe" . smart-pair-region-with)))
   #+end_src



* Settings to make daemon-client experience closer to standalone emacs use


** Opening buffer
   Choose the initial buffer:
 #+begin_src emacs-lisp
   (when (daemonp)
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
 #+end_src

** Load theme

   The theme is only loaded with ~use-package~, hence this:

#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (myemacs-load-theme))))
    (myemacs-load-theme))
#+end_src
