;;;(customize-set-variable 'tramp-default-method' "scp")


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40")
 '(inhibit-startup-screen t)
 '(package-selected-packages
   (quote
    (pandoc ox-pandoc unicode-fonts undo-tree sublimity smartscan multiple-cursors key-chord iy-go-to-char hideshow-org hide-mode-line hide-lines flycheck-clang-analyzer elpy ecb drag-stuff color-theme autopair auto-yasnippet auto-complete-clang-async auto-complete-clang ac-helm))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(require 'iso-transl)

(add-to-list 'load-path "~/myemacs")
(load "myemacs")

(require 'cc-mode)

(require 'autopair)
(autopair-global-mode 1)
(setq autopair-autowrap t)

(require 'yasnippet)
(yas-global-mode 1)

(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

;(custom-set-variables
; '(ac-auto-start nil))

;(ac-set-trigger-key "")
;(ac-set-trigger-key "<tab>")

(require 'auto-complete-clang)
(define-key c++-mode-map (kbd "C-S-<return>") 'ac-complete-clang)


(require 'ecb)
;(require 'ecb-autoloads)


;;; replacement for built-in ecb-deactive, ecb-hide-ecb-windows and
;;; ecb-show-ecb-windows functions
;;; since they hide/deactive ecb but not restore the old windows for me
(defun tmtxt/ecb-deactivate ()
  "deactive ecb and then split emacs into 2 windows that contain 2 most recent buffers"
  (interactive)
  (ecb-deactivate)
  (split-window-right)
  (switch-to-next-buffer)
  (other-window 1))
(defun tmtxt/ecb-hide-ecb-windows ()
  "hide ecb and then split emacs into 2 windows that contain 2 most recent buffers"
  (interactive)
  (ecb-hide-ecb-windows)
  (split-window-right)
  (switch-to-next-buffer)
  (other-window 1))
(defun tmtxt/ecb-show-ecb-windows ()
  "show ecb windows and then delete all other windows except the current one"
  (interactive)
  (ecb-show-ecb-windows)
  (delete-other-windows))

(global-set-key (kbd "C-x C-;") 'ecb-activate)
(global-set-key (kbd "C-x C-'") 'tmtxt/ecb-deactivate)
(global-set-key (kbd "C-;") 'tmtxt/ecb-show-ecb-windows)
(global-set-key (kbd "C-'") 'tmtxt/ecb-hide-ecb-windows)

(add-to-list 'load-path "/usr/share/emacs/site-lisp/doxymacs")

;; Doxymacs hooks
(add-hook 'c-mode-common-hook
  (lambda ()
    (require 'doxymacs)
    (doxymacs-mode t)
    (doxymacs-font-lock)))
(add-hook 'c++-mode-common-hook
  (lambda ()
    (require 'doxymacs)
    (doxymacs-mode t)
    (doxymacs-font-lock)))

(require 'helm-config)

;(helm-mode 1)

;(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
;(global-set-key (kbd "C-x C-f") 'helm-find-files)





(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

(setq mouse-wheel-progressive-speed t) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-step 1) ;; keyboard scroll one line at a time

(add-hook 'after-change-major-mode-hook
          '(lambda ()
             (setq-default indent-tabs-mode nil)
             (setq c-basic-indent 4)
             (setq tab-width 4)))

(add-hook 'python-mode-hook
      (lambda ()
        (setq-default indent-tabs-mode nil)
        (setq-default tab-width 4)
        (setq-default python-indent 4)))

(require 'sublimity)
(require 'sublimity-scroll)
;(require 'sublimity-map)

;(sublimity-global-mode)

(require 'drag-stuff)
(drag-stuff-global-mode t)


(require 'multiple-cursors)
(global-set-key (kbd "C-S-l") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)


;(ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

(key-chord-define-global "çi" 'indent-for-tab-command)

(key-chord-mode 1)

;(key-chord-define-global "hj"     'undo)

(require 'iy-go-to-char)

;(key-chord-define-global "fg" 'iy-go-to-char)
;(key-chord-define-global "df" 'iy-go-to-char-backward)

;(key-chord-define-global "cj" 'backward-char)
;(key-chord-define-global "ck" 'next-line)
;(key-chord-define-global "cl" 'previous-line)
;(key-chord-define-global "cç" 'forward-char)
;
;(key-chord-define-global "wj" 'backward-word)
;(key-chord-define-global "wk" 'next-line)
;(key-chord-define-global "wl" 'previous-line)
;(key-chord-define-global "wç" 'forward-word)
;

(add-hook 'after-init-hook #'global-flycheck-mode)



(put 'downcase-region 'disabled nil)


;(require 'hide-comnt)
(define-key global-map (kbd "C-c #") 'hide/show-comments-toggle)

(defun Kill-whole-line ()
  (interactive)
;  (previous-line)
  (let ((oldpoint (point)))
;    (forward-line)
    (kill-whole-line)
    (goto-char oldpoint)))



(define-key global-map (kbd "C-S-k") 'kill-whole-line)

(global-smartscan-mode 1)

(defun create-indent-and-go-to-next-line ()
  (interactive)
  (move-end-of-line 1)
  (insert "\n")
  (indent-for-tab-command))

(defun add-empty-line-above ()
  (interactive)
  (save-excursion
    (forward-line -1)
    (create-indent-and-go-to-next-line)))


(define-key global-map (kbd "S-<return>") 'create-indent-and-go-to-next-line)
(define-key global-map (kbd "C-<return>") 'add-empty-line-above)


(defun smart-line-beginning ()
  "Move point to the beginning of text on the current line; if that is already
the current position of point, then move it to the beginning of the line."
  (interactive)
  (let ((pt (point)))
    (beginning-of-line-text)
    (when (eq pt (point))
      (beginning-of-line))))


(define-key global-map (kbd "C-a") 'smart-line-beginning)
;(define-key global-map (kbd "M-g") 'keyboard-quit)

; Editing key-chords
(key-chord-define-global "ºe"  'move-end-of-line)
(key-chord-define-global "ºa"  'smart-line-beginning)
(key-chord-define-global "ºp"  'previous-line)
(key-chord-define-global "ºf"  'forward-char)
(key-chord-define-global "ºn"  'next-line)
(key-chord-define-global "ºb"  'backward-char)
(key-chord-define-global "ºl"  'recenter-top-bottom)
(key-chord-define-global "º'"  'isearch-forward)
(key-chord-define-global "ºj"  'ace-jump-mode)

; Command actions key-chords
(key-chord-define-global "çm" 'magit-status)
(key-chord-define-global "çb"  'helm-mini)
(key-chord-define-global "çf"  'find-file)
(key-chord-define-global "çs"  'save-buffer)
(key-chord-define-global "ço"  'other-window)
(key-chord-define-global "çg"  'keyboard-quit)
(key-chord-define-global "çk"  'kill-buffer)
(key-chord-define-global "çu"  'undo)
(key-chord-define-global "ç1"  'delete-other-windows)
(key-chord-define-global "ç2"  'split-window-below)
(key-chord-define-global "ç3"  'split-window-right)
(key-chord-define-global "ç0"  'delete-window)
(key-chord-define-global "çw"  'kill-word)
(key-chord-define-global "ç "  'whitespace-cleanup)
(key-chord-define-global "çj"  'join-line)


;; Yasnippet with Shift+Tab
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
;; Set Yasnippet's key binding to shift+tab
(define-key yas-minor-mode-map (kbd "<backtab>") 'yas-expand)


;(require 'undo-tree)
;(global-undo-tree-mode)


(put 'upcase-region 'disabled nil)

(set-frame-font "Inconsolata-14")


;; elpy
;(elpy-enable)
;; use flycheck not flymake with elpy
;(when (require 'flycheck nil t)
;  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
;  (add-hook 'elpy-mode-hook 'flycheck-mode))







;;;;;;;;;; MOVE TEXT UP AND DOWN ;;;;;;;;;;;;
;;;; move text up and down
(defun move-text-internal (arg)
   (cond
    ((and mark-active transient-mark-mode)
     (if (> (point) (mark))
            (exchange-point-and-mark))
     (let ((column (current-column))
              (text (delete-and-extract-region (point) (mark))))
       (forward-line arg)
       (move-to-column column t)
       (set-mark (point))
       (insert text)
       (exchange-point-and-mark)
       (setq deactivate-mark nil)))
    (t
     (beginning-of-line)
     (when (or (> arg 0) (not (bobp)))
       (forward-line)
       (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg))
       (forward-line -1)))))

(defun move-text-down (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines down."
   (interactive "*p")
   (move-text-internal arg))

(defun move-text-up (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines up."
   (interactive "*p")
   (move-text-internal (- arg)))

(global-set-key [\M-\S-up] 'move-text-up)
(global-set-key [\M-\S-down] 'move-text-down)
